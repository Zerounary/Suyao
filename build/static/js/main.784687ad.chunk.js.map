{"version":3,"sources":["components/hanyu/Divide.js","utils/SuyaoMap.js","components/SuyaoTable.js","components/SuyaoCalendar.js","components/SimpleSuyaoChart.js","App.js","serviceWorker.js","index.js"],"names":["Divide","SuyaoMap","getStar","month","day","isNaN","console","error","map","getChart","star","chart","Array","index","stars","indexOf","i","length","secrets","secret","distances","distance","getStarArray","this","from","keys","key","renderMap","starIndex","findIndex","e","len","m","SuyaoTable","props","relation","className","join","classNames","push","includes","SuyaoDayCell","date","suyao","calendar","Calendar","lunar","style","fontSize","lunarMonth","lunarDate","SuyaoCalendar","useState","moment","startDay","setStartDay","format","currentYear","setCurrentYear","currentMonth","setCurrentMonth","renderDay","startOf","log","value","onChange","year","currentTarget","newStartDay","arr","yearOptions","monthOptions","width","fill","add","toDate","SimpleSuyaoChart","setValue","type","placeholder","dateStr","match","dateArr","split","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.784687ad.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react';\r\nimport {useDynamicList, useRequest, useDrop, useDrag} from \"@umijs/hooks\";\r\nimport {reqHanyuSearchlist} from \"../../utils/ReqLibs\";\r\nimport * as _ from \"lodash\";\r\n\r\nfunction Divide(props){\r\n  const [result, setResult] = useState({});\r\n  const [keyword, setKeyword] = useState('表示性情的词语');\r\n  const [filters, setFilters] = useState({});\r\n  const searchList = useDynamicList([]);\r\n  const searchListReq = useRequest(\r\n    reqHanyuSearchlist,\r\n    {\r\n      manual: true,\r\n      onSuccess: (data,params) => {\r\n        console.log('data', data);\r\n        \r\n        searchList.resetList(data.ret_array);\r\n        setResult(data);\r\n      }\r\n    }\r\n  );\r\n  useEffect(() => {\r\n    searchListReq.run(keyword, pageNum.current, filters);\r\n  }, []);\r\n\r\n  const getDragProps = useDrag();  // 可以传参数content\r\n  const [groupName, setGroupName] = useState('');\r\n  const groups = useDynamicList([]);\r\n  const pageNum = useRef(1);\r\n  const [dropProps] = useDrop({\r\n    onText: (text, e) => {\r\n      console.log(e);\r\n      alert(`'text: ${text}' dropped`);\r\n    },\r\n    onFiles: (files, e) => {\r\n      console.log(e, files);\r\n      alert(`${files.length} file dropped`);\r\n    },\r\n    onUri: (uri, e) => {\r\n      console.log(e);\r\n      alert(`uri: ${uri} dropped`);\r\n    },\r\n    onDom: (content, e) => {\r\n      console.log('onDom',e);\r\n      // sid 是数组的\r\n      let targetIndex = searchList.list.findIndex(e => e.sid.join() === content.sid);\r\n      let target = searchList.list[targetIndex];\r\n      if(content.groupName){\r\n        let conetntGroupIndex = groups.list.findIndex(e => e.groupName === content.groupName);\r\n        let contentGroup = groups.list[conetntGroupIndex];\r\n        contentGroup.list = contentGroup.list.filter(e => e.sid.join() !== content.sid);\r\n        groups.replace(conetntGroupIndex, contentGroup);\r\n      }else{\r\n        searchList.replace(targetIndex, {\r\n          ...target,\r\n          moved: true\r\n        });\r\n      }\r\n      let groupName = e.nativeEvent.target.attributes[\"groupname\"].value;\r\n      let groupIndex = groups.list.findIndex(e => e.groupName === groupName);\r\n      let targetGroup = groups.list[groupIndex];\r\n      targetGroup.list.push(target);\r\n      groups.replace(groupIndex, {\r\n        ...targetGroup\r\n      });\r\n      // alert(`custom: ${content} in ${groupName} group`);\r\n    },\r\n  });\r\n\r\n  let newGroup = (groupName) => {\r\n    groups.push({\r\n      key: groupName,\r\n      groupName,\r\n      list: []\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    /**\r\n     * {\r\n     *    extra: object,  总实例数量: entity-num, 返回数量：return-num, 总页数: total-page\r\n     *   filters: [],\r\n     *   hightlight: \"\" 高亮字\r\n     *   recommend_words: []  热搜字词\r\n     *   ret_array: []  返回的搜索结果\r\n     *   ret_num: number 总实例数量\r\n     *   ret_type: string 返回类型\r\n     *   tag: object 标签\r\n     * }\r\n     */\r\n    <>\r\n      \r\n      <div>\r\n        <label>添加分组：</label>\r\n        <input type=\"text\" \r\n          value={groupName}\r\n          onChange={\r\n            (e) => {\r\n              setGroupName(e.currentTarget.value);\r\n            }\r\n          }\r\n          onKeyPress={\r\n            (e) => {\r\n              if(\"Enter\" === e.key){\r\n                newGroup(groupName);\r\n                setGroupName('');\r\n              }\r\n              \r\n            }\r\n        } />\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\"\r\n        }}\r\n      >\r\n      {\r\n        groups.list.map(group => {\r\n          return (\r\n            <div \r\n              style={{\r\n                margin: 5\r\n              }}\r\n            >\r\n              <div \r\n                style={{\r\n                  width: \"300px\",\r\n                  padding: 5,\r\n                  backgroundColor: \"#FC8181\",\r\n                  color: \"#E2E8F0\"\r\n                }}\r\n              >\r\n                {group.groupName}\r\n              </div>\r\n              <div\r\n                style={{\r\n                  border: '1px dashed #e8e8e8',\r\n                  padding: 16,\r\n                  textAlign: 'center',\r\n                  overflowY: \"auto\",\r\n                  width: \"300px\",\r\n                  height: '300px',\r\n                }}\r\n                groupName={group.groupName}\r\n                {...dropProps}\r\n              >\r\n                {\r\n                  group.list.length?  \r\n                  (\r\n                    group.list.map((item, itemIndex) => {\r\n                      return (\r\n                      <div \r\n                        className=\"bg-blue-100\"\r\n                        style={{\r\n                          width: \"100%\",\r\n                          margin: 5,\r\n                          backgroundColor: \"#FEEBC8\",\r\n                          color: \"#975A16\"\r\n                        }}\r\n                        groupName={group.groupName}\r\n                       {...getDragProps({\r\n                          sid: item.sid.join(''),\r\n                          groupName: group.groupName\r\n                        })\r\n                      }\r\n                      >\r\n                        {item.name.join()}\r\n                      </div>\r\n                      )\r\n                    })\r\n                  ) : \"空\"\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      </div>\r\n\r\n      <div>\r\n        <label>关键字: </label>\r\n        <input \r\n          style={{\r\n            paddingLeft: 5,\r\n            paddingRight: 5\r\n          }}\r\n          type=\"text\" \r\n          value={keyword}\r\n          onChange={\r\n            (e) => {\r\n              setKeyword(e.currentTarget.value);\r\n            }\r\n          }\r\n          onKeyPress={\r\n            (e) => {\r\n              if(\"Enter\" === e.key){\r\n                pageNum.current = 1;\r\n                searchListReq.run(keyword, pageNum.current, filters);\r\n              }\r\n              \r\n            }\r\n          }\r\n        />\r\n        <a \r\n          style={{\r\n            cursor: \"pointer\"\r\n          }}\r\n          onClick={() => {\r\n            if(pageNum.current < result.extra['total-page'] ){\r\n              pageNum.current++;\r\n              searchListReq.run(keyword, pageNum.current, filters);\r\n            }else{\r\n              alert('最后一页了');\r\n            }\r\n          }} \r\n        >下一页</a>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          width: \"1000px\",\r\n          flexWrap: \"wrap\",\r\n          marginTop: 8,\r\n        }}\r\n      >\r\n        {searchList.list.filter(e => !e.moved)\r\n          .map((e, i) => (\r\n            <div\r\n              {...getDragProps({\r\n                  sid: e.sid.join('')\r\n                })\r\n              }\r\n              style={{\r\n                border: '1px solid #e8e8e8',\r\n                padding: 10,\r\n                width: 100,\r\n                height: 40,\r\n                textAlign: 'center',\r\n                marginRight: 16,\r\n                marginTop: 5\r\n              }}\r\n            >\r\n              {e.name.join('')}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Divide;","class SuyaoMap {\r\n  constructor(){\r\n    this.stars  = Array.from(\"角亢氐房心尾箕斗女虚危室壁奎娄胃昂毕觜参井鬼柳星张翼轸\");\r\n    this.keys = Array.from(\"翼角氐心箕女室娄昂觜鬼星\"); // 月名\r\n    this.map = this.keys.map((key, i) => {\r\n      return this.renderMap(key);\r\n    });\r\n  }\r\n  /**\r\n   * 根据月名返回当宿曜月历\r\n   * @param {String} key \r\n   */\r\n   renderMap(star) {\r\n    let starIndex = this.stars.findIndex(e => e === star);\r\n    let len = 14;\r\n    let m = new Array(30);\r\n\r\n    m[14] = star;\r\n    for(let i = 0; i < len; i++){\r\n      m[13-i] = this.stars[(starIndex-i-1+27)%27];\r\n    }\r\n    len = 15;\r\n    for(let i = 0; i < len; i++) {\r\n      //把十五以后的填充好\r\n      m[15+i] = this.stars[(starIndex+i+1)%27];\r\n    }\r\n    return m;\r\n  }\r\n\r\n  /***\r\n   * 通过农历年月，获取命宿\r\n   * @param {Integer} month \r\n   * @param {Integer} day \r\n   */\r\n  getStar = (month, day) => {\r\n    if(isNaN(month) || isNaN(day) || month < 0 || day < 0){\r\n      console.error(`SuyaoMap.getStar error: month is ${month}, day is ${day}`);\r\n      return null;\r\n    }\r\n    return this.map[month-1][day-1]\r\n  }\r\n  \r\n  /**\r\n   * 获取某个星宿的星盘\r\n   * @param {CharacterData} star\r\n   */\r\n  getChart = (star) => {\r\n    let chart = new Array(27);\r\n    let index = this.stars.indexOf(star);\r\n    for(let i = 0 ; i < this.stars.length; i++){\r\n      chart[(i+27+13-index)%27] = this.stars[i];\r\n    }\r\n\r\n    let secrets = ['成','坏','友','亲','胎','荣','衰','安','危','成','坏','友','亲','命', '荣','衰','安','危','成','坏','友','亲','业','荣','衰','安','危'];\r\n    chart = chart.map((star,index) => {\r\n      return {\r\n        star,\r\n        secret: secrets[index]\r\n      }\r\n    });\r\n    let distances = ['远','远','远','远','远','中','中','中','中','近','近','近','近','命','近','近','近','近','中','中','中','中','远','远','远','远','远']\r\n    chart = chart.map((star, index) => {\r\n      return {\r\n        ...star,\r\n        distance: distances[index]\r\n      }\r\n    })\r\n    return chart;\r\n  }\r\n\r\n  getStarArray = () => {\r\n    return this.stars;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport default SuyaoMap;","import React from 'react';\r\nimport SuyaoMap from './../utils/SuyaoMap';\r\n\r\n\r\n\r\n/**\r\n * 展示一个命星的星盘\r\n * @param {Object}} props \r\n */\r\nfunction SuyaoTable (props){\r\n  // todo 输入一些关系，从命星的角度去观察\r\n  const { star, relation } = props;\r\n  let suyao = new SuyaoMap();\r\n  let chart = suyao.getChart(star);\r\n\r\n  let theadStyle = [\"bg-blue-500\", \"bg-opacity-75\", \"text-gray-100\"];\r\n\r\n  return (\r\n    <table\r\n      className=\"table-auto text-center\"\r\n    >\r\n      <thead\r\n        className={theadStyle.join(' ')}\r\n      >\r\n        <tr>\r\n          {\r\n            chart.map(e => {\r\n              let classNames = [\"x-4\", \"py-2\"];\r\n              if(e.distance === '命'){\r\n                classNames.push('bg-green-600')\r\n              }\r\n              return (\r\n                <th key={e.star} className={classNames.join(' ')}>{e.star}</th>\r\n              )\r\n            })\r\n          }\r\n        </tr>\r\n      </thead>\r\n      <tbody\r\n        className=\"bg-green-500 bg-opacity-25 \"\r\n      >\r\n        <tr>\r\n          {\r\n            chart.map(e => {\r\n              let classNames = [\"bg-gray-100\", \"border\", \"x-4\", \"py-2\"];\r\n              if(e.secret === '命'){\r\n                classNames.push('bg-green-600');\r\n                classNames.push('text-gray-100');\r\n              }\r\n              if(['业', '胎'].includes(e.secret)){\r\n                classNames.push('text-purple-600');\r\n                // classNames.push('text-gray-100');\r\n              }\r\n              return (<td key={e.star} className={classNames.join(' ')} >{e.secret}</td>)\r\n            })\r\n          }\r\n        </tr>\r\n        <tr>\r\n          {\r\n            chart.map(e => {\r\n              let classNames = [\"border\", \"px-4\", \"py-2\", 'bg-green-600'];\r\n              if(e.distance === '命'){\r\n                classNames.push('bg-green-600');\r\n                classNames.push('text-gray-100');\r\n              }\r\n              if(e.distance === '近'){\r\n                classNames.push(\"bg-opacity-75\");\r\n                // classNames.push('bg-green-700');\r\n                classNames.push('text-gray-100');\r\n              }\r\n              if(e.distance === '中'){\r\n                classNames.push(\"bg-opacity-50\");\r\n                // classNames.push('bg-green-400');\r\n                classNames.push('text-gray-100');\r\n              }\r\n              if(e.distance === '远'){\r\n                classNames.push(\"bg-opacity-25\");\r\n                // classNames.push('bg-blue-300');\r\n                classNames.push('text-gray-100');\r\n              }\r\n              return (<td key={e.star} className={classNames.join(' ')} >{e.distance}</td>)\r\n            })\r\n          }\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\nexport default SuyaoTable;","import React, { useState } from \"react\";\r\nimport SuyaoMap from \"./../utils/SuyaoMap\";\r\nimport Calendar from \"@z-yue/calendar\";\r\nimport moment from \"moment\";\r\n\r\n/**\r\n * 展示一日的宿曜日历\r\n * @param {Object} props\r\n */\r\nfunction SuyaoDayCell(props) {\r\n  const { date } = props;\r\n  let suyao = new SuyaoMap();\r\n  const calendar = new Calendar(date);\r\n  const { lunar } = calendar;\r\n  let star = suyao.getStar(lunar.month, lunar.date);\r\n  return (\r\n    <div className=\"border p-3 block w-24 h-24 text-center\">\r\n      <p>\r\n        <span style={{ fontSize: \"18px\" }}>{calendar.date}</span>\r\n        <br />\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          {lunar.date == 1 ? lunar.lunarMonth : lunar.lunarDate}\r\n        </span>\r\n        <br />\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          {star}\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction yearOptions() {\r\n  let arr = [];\r\n  for (let year = 1900; year <= 2050; year++) {\r\n    arr.push(year);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction monthOptions() {\r\n  let arr = [];\r\n  for (let month = 0; month < 12; month++) {\r\n    arr.push(month);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction SuyaoCalendar(props) {\r\n  const [startDay, setStartDay] = useState(\r\n    moment()\r\n  );\r\n  const [currentYear, setCurrentYear] = useState(startDay.format('YYYY'));\r\n  const [currentMonth, setCurrentMonth] = useState(startDay.format('M')-1);\r\n  let onYearChange = (e) => {\r\n    let year = e.currentTarget.value;\r\n    let newStartDay = moment(startDay).year(year);\r\n    setCurrentYear(year);\r\n    setStartDay(newStartDay)\r\n  };\r\n  let onMonthChange = (e) => {\r\n    let month = e.currentTarget.value;\r\n    let newStartDay = moment(startDay).month(month);\r\n    setCurrentMonth(month);\r\n    setStartDay(newStartDay)\r\n  };\r\n  let renderDay = moment(startDay).startOf(\"month\").startOf(\"week\");\r\n  console.log(renderDay.format(\"YYYYMMDD\"))\r\n  console.log('currentYear', currentYear);\r\n  console.log('currentMonth', currentMonth);\r\n  return (\r\n    <div>\r\n      <div>\r\n        <select\r\n            value={currentYear}\r\n            onChange={onYearChange}\r\n          >\r\n            {\r\n              yearOptions().map(year => {\r\n                return (<option key={year} value={year} >{year}年</option>)\r\n              })\r\n            }\r\n          </select>\r\n          <select\r\n            value={currentMonth}\r\n            onChange={onMonthChange}\r\n          >\r\n            {\r\n              monthOptions().map(month => {\r\n                return (<option key={month} value={month} >{month+1}月</option>)\r\n              })\r\n            }\r\n          </select>\r\n      </div>\r\n      <div className=\"grid grid-cols-7 divide-x divide-green-200\" style={{ width: \"42rem\" }}>\r\n        {[\"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"日\"].map((e) => {\r\n          return <div className=\"text-center bg-blue-500 text-white\" style={{ width: \"6rem\" }}>{e}</div>;\r\n        })}\r\n        {new Array(6 * 7).fill(\"\").map((e) => {\r\n          renderDay.add(1, \"days\");\r\n          return <SuyaoDayCell date={renderDay.toDate()} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default SuyaoCalendar;\r\n","import React,{useState} from 'react';\r\nimport SuyaoMap from '../utils/SuyaoMap';\r\nimport SuyaoTable from \"./SuyaoTable\";\r\nimport SuayoCalendar from \"./SuyaoCalendar\";\r\n\r\nfunction SimpleSuyaoChart(props){\r\n  let suyao = new SuyaoMap();\r\n  const [value, setValue] = useState('觜');\r\n  let onSelectChange = (e) => {\r\n    console.log('e', e);\r\n    setValue(e.currentTarget.value);\r\n  }\r\n  let onTextChange = (e) => {\r\n    console.log('e', e);\r\n    let dateStr = e.currentTarget.value;\r\n    console.log('dateStr', dateStr);\r\n    if(dateStr.match(/^\\d+-\\d+$/)){\r\n      console.log('matched', dateStr);\r\n      \r\n      let dateArr = dateStr.split('-');\r\n      setValue(suyao.getStar(dateArr[0], dateArr[1]));\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App\" >\r\n      <div className=\"grid grid-cols-6 gap-4\">\r\n        <div>\r\n          <label>宿曜：</label>\r\n          <select\r\n            value={value}\r\n            onChange={onSelectChange}\r\n          >\r\n            {\r\n              suyao.getStarArray().map(star => {\r\n                return (<option key={star} value={star} >{star}</option>)\r\n              })\r\n            }\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>农历：</label>\r\n          <input type=\"text\" placeholder=\"4-2\" onChange={onTextChange} ></input>\r\n        </div>\r\n        <div className=\"col-span-6\">\r\n          <SuyaoTable star={value} />\r\n        </div>\r\n      </div>\r\n      <SuayoCalendar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SimpleSuyaoChart;","import React,{useState} from 'react';\r\nimport './App.css';\r\nimport './tailwind.min.css'\r\nimport Divide from \"./components/hanyu/Divide\";\r\nimport SimpleSuyaoChart from \"./components/SimpleSuyaoChart\";\r\nimport { useRequest } from '@umijs/hooks';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <SimpleSuyaoChart />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}