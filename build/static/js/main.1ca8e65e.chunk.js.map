{"version":3,"sources":["utils/SuyaoMap.js","components/SuyaoTable.js","App.js","serviceWorker.js","index.js"],"names":["SuyaoMap","getStar","month","day","isNaN","console","error","map","getChart","star","chart","Array","index","stars","indexOf","i","length","secrets","secret","distances","distance","getStarArray","this","from","keys","key","renderMap","starIndex","findIndex","e","len","m","SuyaoTable","props","relation","className","join","classNames","push","includes","App","suyao","useState","value","setValue","onChange","log","currentTarget","type","placeholder","dateStr","match","dateArr","split","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1ca8e65e.chunk.js","sourcesContent":["class SuyaoMap {\n  constructor(){\n    this.stars  = Array.from(\"角亢氐房心尾箕斗女虚危室壁奎娄胃昂毕觜参井鬼柳星张翼轸\");\n    this.keys = Array.from(\"翼角氐心箕女室娄昂觜鬼星\"); // 月名\n    this.map = this.keys.map((key, i) => {\n      return this.renderMap(key);\n    });\n  }\n  /**\n   * 根据月名返回当宿曜月历\n   * @param {String} key \n   */\n   renderMap(star) {\n    let starIndex = this.stars.findIndex(e => e === star);\n    let len = 14;\n    let m = new Array(30);\n\n    m[14] = star;\n    for(let i = 0; i < len; i++){\n      m[13-i] = this.stars[(starIndex-i-1+27)%27];\n    }\n    len = 15;\n    for(let i = 0; i < len; i++) {\n      //把十五以后的填充好\n      m[15+i] = this.stars[(starIndex+i+1)%27];\n    }\n    return m;\n  }\n\n  /***\n   * 通过农历年月，获取命宿\n   * @param {Integer} month \n   * @param {Integer} day \n   */\n  getStar = (month, day) => {\n    if(isNaN(month) || isNaN(day) || month < 0 || day < 0){\n      console.error(`SuyaoMap.getStar error: month is ${month}, day is ${day}`);\n      return null;\n    }\n    return this.map[month-1][day-1]\n  }\n  \n  /**\n   * 获取某个星宿的星盘\n   * @param {CharacterData} star\n   */\n  getChart = (star) => {\n    let chart = new Array(27);\n    let index = this.stars.indexOf(star);\n    for(let i = 0 ; i < this.stars.length; i++){\n      chart[(i+27+13-index)%27] = this.stars[i];\n    }\n\n    let secrets = ['成','坏','友','亲','胎','荣','衰','安','危','成','坏','友','亲','命', '荣','衰','安','危','成','坏','友','亲','业','荣','衰','安','危'];\n    chart = chart.map((star,index) => {\n      return {\n        star,\n        secret: secrets[index]\n      }\n    });\n    let distances = ['远','远','远','远','远','中','中','中','中','近','近','近','近','命','近','近','近','近','中','中','中','中','远','远','远','远','远']\n    chart = chart.map((star, index) => {\n      return {\n        ...star,\n        distance: distances[index]\n      }\n    })\n    return chart;\n  }\n\n  getStarArray = () => {\n    return this.stars;\n  }\n\n}\n\n\n\nexport default SuyaoMap;","import React from 'react';\nimport SuyaoMap from './../utils/SuyaoMap';\n\n\nfunction SuyaoTable (props){\n  const { star, relation } = props;\n  let suyao = new SuyaoMap();\n  let chart = suyao.getChart(star);\n\n  let theadStyle = [\"bg-blue-500\", \"bg-opacity-75\", \"text-gray-100\"];\n\n  return (\n    <table\n      className=\"table-auto text-center\"\n    >\n      <thead\n        className={theadStyle.join(' ')}\n      >\n        <tr>\n          {\n            chart.map(e => {\n              let classNames = [\"x-4\", \"py-2\"];\n              if(e.distance === '命'){\n                classNames.push('bg-green-600')\n              }\n              return (\n                <th key={e.star} className={classNames.join(' ')}>{e.star}</th>\n              )\n            })\n          }\n        </tr>\n      </thead>\n      <tbody\n        className=\"bg-green-500 bg-opacity-25 \"\n      >\n        <tr>\n          {\n            chart.map(e => {\n              let classNames = [\"bg-gray-100\", \"border\", \"x-4\", \"py-2\"];\n              if(e.secret === '命'){\n                classNames.push('bg-green-600');\n                classNames.push('text-gray-100');\n              }\n              if(['业', '胎'].includes(e.secret)){\n                classNames.push('text-purple-600');\n                // classNames.push('text-gray-100');\n              }\n              return (<td key={e.star} className={classNames.join(' ')} >{e.secret}</td>)\n            })\n          }\n        </tr>\n        <tr>\n          {\n            chart.map(e => {\n              let classNames = [\"border\", \"px-4\", \"py-2\", 'bg-green-600'];\n              if(e.distance === '命'){\n                classNames.push('bg-green-600');\n                classNames.push('text-gray-100');\n              }\n              if(e.distance === '近'){\n                classNames.push(\"bg-opacity-75\");\n                // classNames.push('bg-green-700');\n                classNames.push('text-gray-100');\n              }\n              if(e.distance === '中'){\n                classNames.push(\"bg-opacity-50\");\n                // classNames.push('bg-green-400');\n                classNames.push('text-gray-100');\n              }\n              if(e.distance === '远'){\n                classNames.push(\"bg-opacity-25\");\n                // classNames.push('bg-blue-300');\n                classNames.push('text-gray-100');\n              }\n              return (<td key={e.star} className={classNames.join(' ')} >{e.distance}</td>)\n            })\n          }\n        </tr>\n      </tbody>\n    </table>\n  )\n}\nexport default SuyaoTable;","import React,{useState} from 'react';\nimport './App.css';\nimport './tailwind.min.css'\nimport SuyaoMap from './utils/SuyaoMap';\nimport SuyaoTable from \"./components/SuyaoTable\";\n\n\nfunction App() {\n  let suyao = new SuyaoMap();\n  const [value, setValue] = useState('觜');\n  let onSelectChange = (e) => {\n    console.log('e', e);\n    setValue(e.currentTarget.value);\n  }\n  let onTextChange = (e) => {\n    console.log('e', e);\n    let dateStr = e.currentTarget.value;\n    console.log('dateStr', dateStr);\n    if(dateStr.match(/^\\d+-\\d+$/)){\n      console.log('matched', dateStr);\n      \n      let dateArr = dateStr.split('-');\n      setValue(suyao.getStar(dateArr[0], dateArr[1]));\n    }\n  }\n  return (\n    <div className=\"App\" >\n      <div className=\"grid grid-cols-6 gap-4\">\n        <div>\n          <label>宿曜：</label>\n          <select\n            value={value}\n            onChange={onSelectChange}\n          >\n            {\n              suyao.getStarArray().map(star => {\n                return (<option key={star} value={star} >{star}</option>)\n              })\n            }\n          </select>\n        </div>\n        <div>\n          <label>农历：</label>\n          <input type=\"text\" placeholder=\"4-2\" onChange={onTextChange} ></input>\n        </div>\n        <div className=\"col-span-6\">\n          <SuyaoTable star={value} />\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}